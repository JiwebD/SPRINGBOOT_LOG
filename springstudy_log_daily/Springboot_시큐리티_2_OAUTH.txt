springboot 시큐리티 02_OAUTH2 공부 

01_INIT 에서 이어서 시작


client-id , client-secret , 
네이버 - 네이버개발자센터 
카카오 - 카카오개발자센터
구글 - 구글클라우드 플랫폼
  프로젝트 만들기 , Oauth구성 , OAuth 동의 화면 (클라이언트 , 대상) 설정 

----
start.spring.io > add dependencies OAuth2 Client 추가 익스플로어 복붙 
build.gradle
implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

dependencies {
	//WEB
	implementation 'org.springframework.boot:spring-boot-starter-web'

	//THYMELEAF
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'

	//DB
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-jdbc'
	runtimeOnly 'com.mysql:mysql-connector-j'

	//LOMBOK
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	//SECURITY
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'

	//OAUTH2 CLIENT
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

	//TEST
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}


---
application.properties


spring.application.name=demo
server.port=8090

#UTF-8 Setting
spring.servlet.filter.encoding.filter-name=encodingFilter
spring.servlet.filter.encoding.filter-class=org.springframework.web.filter.CharacterEncodingFilter
spring.servlet.filter.encoding.init-param.encoding=UTF-8
spring.servlet.filter.encoding.init-param.forceEncoding=true
spring.servlet.filter.encoding.url-pattern=/*

# ----------------------------------------------------------------------------------------------------
#  OAUTH2 CLIENT OPTION
# ----------------------------------------------------------------------------------------------------
#----------------------------------------------------------------
# KAKAO AUTH
#----------------------------------------------------------------
#KAKAO
spring.security.oauth2.client.registration.kakao.client-id=-
spring.security.oauth2.client.registration.kakao.client-secret=-
spring.security.oauth2.client.registration.kakao.client-authentication-method=client_secret_post
spring.security.oauth2.client.registration.kakao.redirect-uri=http://localhost:8090/login/oauth2/code/kakao
spring.security.oauth2.client.registration.kakao.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.kakao.scope=profile_nickname,profile_image,account_email
spring.security.oauth2.client.registration.kakao.client-name=Kakao
spring.security.oauth2.client.kakao.logout.redirect.uri=http://localhost:8090/login

#KAKAO PROVIDER
spring.security.oauth2.client.provider.kakao.authorization-uri = https://kauth.kakao.com/oauth/authorize
spring.security.oauth2.client.provider.kakao.token-uri = https://kauth.kakao.com/oauth/token
spring.security.oauth2.client.provider.kakao.user-info-uri = https://kapi.kakao.com/v2/user/me
spring.security.oauth2.client.provider.kakao.user-name-attribute = id


# ---------------------------------------------------
# NAVER OAUTH
# ---------------------------------------------------
spring.security.oauth2.client.registration.naver.client-id=-
spring.security.oauth2.client.registration.naver.client-secret=-
spring.security.oauth2.client.registration.naver.redirect-uri=http://localhost:8090/login/oauth2/code/naver
spring.security.oauth2.client.registration.naver.scope=name,email,profile_image
spring.security.oauth2.client.registration.naver.client-name=naver
spring.security.oauth2.client.registration.naver.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.naver.provider=naver

#NAVER PROVIDER
spring.security.oauth2.client.provider.naver.authorization-uri=https://nid.naver.com/oauth2.0/authorize
spring.security.oauth2.client.provider.naver.token-uri=https://nid.naver.com/oauth2.0/token
spring.security.oauth2.client.provider.naver.user-info-uri=https://openapi.naver.com/v1/nid/me
spring.security.oauth2.client.provider.naver.user-name-attribute=response


# ---------------------------------------------------
# GOOGLE OAUTH
# ---------------------------------------------------
#Google
spring.security.oauth2.client.registration.google.client-id=-
spring.security.oauth2.client.registration.google.client-secret=-
spring.security.oauth2.client.registration.google.scope=email,profile








------
12SPRING_SEUCURITY/02_OAUTH2/src/main/java/com/example/demo/config/auth/exceptionHandler/CustomAccessDeniedHandler.java

package com.example.demo.config.auth.exceptionHandler;


import java.io.IOException;


import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.springframework.security.access.AccessDeniedException;
import org.springframework.security.web.access.AccessDeniedHandler;

import lombok.extern.slf4j.Slf4j;

@Slf4j
public class CustomAccessDeniedHandler implements AccessDeniedHandler {

	@Override
	public void handle(HttpServletRequest request, HttpServletResponse response,
                       AccessDeniedException accessDeniedException) throws IOException, ServletException {
		log.error("CustomAccessDeniedHandler's handle invoke..");
		response.sendRedirect(request.getContextPath()+"/login?error="+accessDeniedException.getMessage());

	}

}


------
12SPRING_SEUCURITY/02_OAUTH2/src/main/java/com/example/demo/config/auth/exceptionHandler/CustomAuthenticationEntryPoint.java

package com.example.demo.config.auth.exceptionHandler;

import java.io.IOException;

import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.springframework.security.core.AuthenticationException;
import org.springframework.security.web.AuthenticationEntryPoint;

import lombok.extern.slf4j.Slf4j;

import lombok.extern.slf4j.Slf4j;

import lombok.extern.slf4j.Slf4j;

@Slf4j
public class CustomAuthenticationEntryPoint implements AuthenticationEntryPoint {

	@Override
	public void commence(HttpServletRequest request, HttpServletResponse response,
                         AuthenticationException authException) throws IOException, ServletException {

		log.error("CustomAuthenticationEntryPoint's commence invoke....");
		response.sendRedirect("/login?error="+authException.getMessage());
	}

}









-----
12SPRING_SEUCURITY/02_OAUTH2/src/main/java/com/example/demo/config/auth/loginHandler/CustomLoginFailureHandler.java

package com.example.demo.config.auth.loginHandler;

import java.io.IOException;


import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.springframework.security.core.AuthenticationException;
import org.springframework.security.web.authentication.AuthenticationFailureHandler;

import lombok.extern.slf4j.Slf4j;

@Slf4j
public class CustomLoginFailureHandler implements AuthenticationFailureHandler {

	@Override
	public void onAuthenticationFailure(HttpServletRequest request, HttpServletResponse response,
                                        AuthenticationException exception) throws IOException, ServletException {

		log.error("CustomLoginFailureHandler's onAuthenticationFailure invoke..") ;
		response.sendRedirect(request.getContextPath()+"/login?error="+exception.getMessage());
	}



}


------
12SPRING_SEUCURITY/02_OAUTH2/src/main/java/com/example/demo/config/auth/loginHandler/CustomLoginSuccessHandler.java

package com.example.demo.config.auth.loginHandler;

import java.io.IOException;


import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.springframework.security.core.AuthenticationException;
import org.springframework.security.web.authentication.AuthenticationFailureHandler;

import lombok.extern.slf4j.Slf4j;

@Slf4j
public class CustomLoginFailureHandler implements AuthenticationFailureHandler {

	@Override
	public void onAuthenticationFailure(HttpServletRequest request, HttpServletResponse response,
                                        AuthenticationException exception) throws IOException, ServletException {

		log.error("CustomLoginFailureHandler's onAuthenticationFailure invoke..") ;
		response.sendRedirect(request.getContextPath()+"/login?error="+exception.getMessage());
	}



}



------

12SPRING_SEUCURITY/02_OAUTH2/src/main/java/com/example/demo/config/auth/logoutHandler/CustomLogoutHandler.java

package com.example.demo.config.auth.logoutHandler;



import com.example.demo.config.auth.PrincipalDetails;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;
import org.springframework.security.core.Authentication;
import org.springframework.security.web.authentication.logout.LogoutHandler;

import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;

@Slf4j
@Component
public class CustomLogoutHandler implements LogoutHandler {

	@Override
	public void logout(HttpServletRequest request, HttpServletResponse response, Authentication authentication) {

		log.info("CustomLogoutHandler's logout invoke");

		PrincipalDetails principalDetails = (PrincipalDetails)authentication.getPrincipal();
		String provider = principalDetails.getUserDto().getProvider();
		if(provider!=null && provider.startsWith("kakao")){

		}else if(provider!=null && provider.startsWith("naver")){

		}else if(provider!=null && provider.startsWith("google")){

		}

		HttpSession session =  request.getSession();
		if(session!=null)
			session.invalidate();

	}

}



------
12SPRING_SEUCURITY/02_OAUTH2/src/main/java/com/example/demo/config/auth/logoutHandler/CustomLogoutSuccessHandler.java

package com.example.demo.config.auth.logoutHandler;

import java.io.IOException;


import com.example.demo.config.auth.PrincipalDetails;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.security.core.Authentication;
import org.springframework.security.web.authentication.logout.LogoutSuccessHandler;

import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;

@Slf4j
@Component
public class CustomLogoutSuccessHandler implements LogoutSuccessHandler {

	@Value("${spring.security.oauth2.client.registration.kakao.client-id}")
	String KAKAO_CLIENT_ID;
	@Value("${spring.security.oauth2.client.kakao.logout.redirect.uri}")
	String KAKAO_LOGOUT_REDIRECT_URI;


	@Override
	public void onLogoutSuccess(HttpServletRequest request, HttpServletResponse response, Authentication authentication)
			throws IOException, ServletException {
		log.info("CustomLogoutSuccessHandler onLogoutSuccess invoke..");

		//
		PrincipalDetails principalDetails = (PrincipalDetails)authentication.getPrincipal();
		String provider = principalDetails.getUserDto().getProvider();
		if(provider!=null && provider.startsWith("kakao")){
			response.sendRedirect("https://kauth.kakao.com/oauth/logout?client_id="+KAKAO_CLIENT_ID+"&logout_redirect_uri="+KAKAO_LOGOUT_REDIRECT_URI);
			return ;
		}else if(provider!=null && provider.startsWith("naver")){
			//https://nid.naver.com/nidlogin.logout?returl=https://www.naver.com/
			response.sendRedirect("https://nid.naver.com/nidlogin.logout?returl=https://www.naver.com/");
			return ;

		}else if(provider!=null && provider.startsWith("google")){
			response.sendRedirect(("http://accounts.google.com/Logout"));
			return ;

		}


		response.sendRedirect(request.getContextPath()+"/");

	}

}




------
12SPRING_SEUCURITY/02_OAUTH2/src/main/java/com/example/demo/config/auth/provider/KakaoUserInfo.java


package com.example.demo.config.auth.provider;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.time.LocalDateTime;
import java.util.Map;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class KakaoUserInfo implements OAuth2UserInfo{
    private Long id;
    private LocalDateTime created_at;
    private Map<String,Object> properties;
    private Map<String,Object> kakao_account;

    @Override
    public String getName() {
        return (String)properties.get("nickname");
    }

    @Override
    public String getEmail() {
        return (String)kakao_account.get("email");
    }

    @Override
    public String getProvider() {
        return "Kakao";
    }

    @Override
    public String getProviderId() {
        return id+"";
    }

    @Override
    public Map<String, Object> getAttributes() {
        return null;
    }


//    private Map<String,Object> attributes;


}



--------
12SPRING_SEUCURITY/02_OAUTH2/src/main/java/com/example/demo/config/auth/provider/NaverUserinfo.java

package com.example.demo.config.auth.provider;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.util.Map;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class NaverUserinfo implements OAuth2UserInfo {
    private String id;
    private Map<String,Object> attributes;

    @Override
    public String getName() {
        return (String) attributes.get("name");
    }

    @Override
    public String getEmail() {
        return (String) attributes.get("email");
    }

    @Override
    public String getProvider() {
        return "Naver";
    }

    @Override
    public String getProviderId() {
        return id;
    }
}




--------
12SPRING_SEUCURITY/02_OAUTH2/src/main/java/com/example/demo/config/auth/provider/GoogleUserinfo.java

package com.example.demo.config.auth.provider;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.util.Map;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class GoogleUserinfo implements OAuth2UserInfo {
    private String id;
    private Map<String,Object> attributes;

    @Override
    public String getName() {
        return (String)attributes.get("name");
    }

    @Override
    public String getEmail() {
        return (String)attributes.get("email");
    }

    @Override
    public String getProvider() {
        return "google";
    }

    @Override
    public String getProviderId() {
        return this.id;
    }

    @Override
    public Map<String, Object> getAttributes() {
        return Map.of();
    }
}




-----
12SPRING_SEUCURITY/02_OAUTH2/src/main/java/com/example/demo/config/auth/provider/OAuth2UserInfo.java

package com.example.demo.config.auth.provider;

import java.util.Map;

public interface OAuth2UserInfo {
    String getName();
    String getEmail();
    String getProvider();
    String getProviderId();
    Map<String, Object> getAttributes();
}





-------
12SPRING_SEUCURITY/02_OAUTH2/src/main/java/com/example/demo/config/auth/PrincipalDetails.java

package com.example.demo.config.auth;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Map;

import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;

import com.example.demo.domain.dto.UserDto;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import org.springframework.security.oauth2.core.user.OAuth2User;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class PrincipalDetails implements UserDetails, OAuth2User {
	private UserDto userDto;
	public PrincipalDetails(UserDto userDto){
		this.userDto = userDto;
	}

	//----------------------------
	// Oauth2User
	//----------------------------
	Map<String, Object > attributes;
	String access_token;
	@Override
	public Map<String, Object> getAttributes() {
		return attributes;
	}

	@Override
	public String getName() {
		return userDto.getUsername();
	}



	//----------------------------
	// UserDetails
	//----------------------------
	@Override
	public Collection<? extends GrantedAuthority> getAuthorities() {
		Collection <GrantedAuthority> authorities = new ArrayList();
		authorities.add(new SimpleGrantedAuthority(userDto.getRole()));
		return authorities;
	}

	@Override
	public String getPassword() {
		// TODO Auto-generated method stub
		return userDto.getPassword();
	}

	@Override
	public String getUsername() {
		// TODO Auto-generated method stub
		return userDto.getUsername();
	}

	@Override
	public boolean isAccountNonExpired() {
		// TODO Auto-generated method stub
		return true;
	}

	@Override
	public boolean isAccountNonLocked() {
		// TODO Auto-generated method stub
		return true;
	}

	@Override
	public boolean isCredentialsNonExpired() {
		// TODO Auto-generated method stub
		return true;
	}

	@Override
	public boolean isEnabled() {
		// TODO Auto-generated method stub
		return true;
	}


}




---------
12SPRING_SEUCURITY/02_OAUTH2/src/main/java/com/example/demo/config/auth/PrincipalDetailsOAuth2Service.java

package com.example.demo.config.auth;

import com.example.demo.config.auth.provider.GoogleUserinfo;
import com.example.demo.config.auth.provider.KakaoUserInfo;
import com.example.demo.config.auth.provider.NaverUserinfo;
import com.example.demo.config.auth.provider.OAuth2UserInfo;
import com.example.demo.domain.dto.UserDto;
import com.example.demo.domain.entity.User;
import com.example.demo.domain.repository.UserRepository;
import com.nimbusds.openid.connect.sdk.claims.UserInfo;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService;
import org.springframework.security.oauth2.client.userinfo.OAuth2UserRequest;
import org.springframework.security.oauth2.core.OAuth2AuthenticationException;
import org.springframework.security.oauth2.core.user.OAuth2User;
import org.springframework.stereotype.Service;

import javax.swing.text.html.Option;
import java.time.LocalDateTime;
import java.time.OffsetDateTime;
import java.util.Map;
import java.util.Optional;

@Service
public class PrincipalDetailsOAuth2Service extends DefaultOAuth2UserService {

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private PasswordEncoder passwordEncoder;

    @Override
    public OAuth2User loadUser(OAuth2UserRequest userRequest) throws OAuth2AuthenticationException {
//        System.out.println("PrincipalDetailsOAuth2Service's loadUser invoke..");
//        System.out.println("userRequest : " + userRequest);
        System.out.println("userRequest.getClientRegistration() :"+ userRequest.getClientRegistration());
//        System.out.println("userRequest.getAccessToken() : "+ userRequest.getAccessToken());
//        System.out.println("userRequest.getAdditionalParameters() : "+ userRequest.getAdditionalParameters());
//        System.out.println("userRequest.getAccessToken().getTokenValue() : "+ userRequest.getAccessToken().getTokenValue());
//        System.out.println("userRequest.getAccessToken().getTokenType().getValue() : "+ userRequest.getAccessToken().getTokenType().getValue());
//        System.out.println("userRequest.getAccessToken().getScopes() : "+ userRequest.getAccessToken().getScopes());

        //OAuth2UserInfo
        OAuth2User oAuth2User = super.loadUser(userRequest);
        System.out.println("oAuth2User : " + oAuth2User);
        System.out.println("getAttributes : " + oAuth2User.getAttributes());

        OAuth2UserInfo oAuth2UserInfo = null;
        //'kakao','naver','google','in-'
        String provider = userRequest.getClientRegistration().getRegistrationId();

        Map<String, Object> attributes = oAuth2User.getAttributes();

        if(provider.startsWith("kakao")) {
            //카카오 로그인시
        Long id = (Long) attributes.get("id");
        LocalDateTime connected_at = OffsetDateTime.parse(attributes.get("connected_at").toString()).toLocalDateTime();
        Map<String, Object> properties = (Map<String, Object>) attributes.get("properties");
        Map<String, Object> kakao_account = (Map<String, Object>)attributes.get("kakao_account");
        System.out.println("id :" + id);
        System.out.println("connected_at :" + connected_at);
        System.out.println("properties :" + properties);
        oAuth2UserInfo = new KakaoUserInfo(id, connected_at, properties, kakao_account);


        }else if(provider.startsWith("naver")) {
            //네이버 로그인시
            Map<String,Object> response = (Map<String,Object>)attributes.get("response");
            String id = (String)response.get("id");
            oAuth2UserInfo = new NaverUserinfo(id,response);



        }else if(provider.startsWith("google")){
            //구글 로그인시
            String id = (String)attributes.get("sub");
            oAuth2UserInfo = new GoogleUserinfo(id,attributes);


        }

        System.out.println("oAuth2UserInfo : " + oAuth2UserInfo);


        // 최초 로그인시 로컬계정 DB 저장 처리
        String username = oAuth2UserInfo.getProvider()+"_"+oAuth2UserInfo.getProviderId();
        String password = passwordEncoder.encode("1234");
        Optional<User> userOptional = userRepository.findById(username);
        //UserDto 생성 (이유 : PrincipalDetails에 포함)
        //UserEntity 생성 (이유 : 최초 로그인시 DB 저장용도)
        UserDto userDto = null;
        if(userOptional.isEmpty()){
            //최초 로그인(Dto , Entity)
            userDto = UserDto   .builder()
                                .username(username)
                                .password(password)
                                .role("ROLE_USER")
                                .build();
            User user = userDto.toEntity();
            userRepository.save(user); //계정 등록
        } else {
            //기존 유저 존재(Dto)
            User user = userOptional.get();
            userDto = UserDto.toDto(user);
        }


        //PrincipalDetails 전달
        PrincipalDetails principalDetails = new PrincipalDetails();
        userDto.setProvider(provider);
        userDto.setProviderId(oAuth2UserInfo.getProviderId());
        principalDetails.setUserDto(userDto);
        principalDetails.setAttributes(oAuth2User.getAttributes());
        principalDetails.setAccess_token(userRequest.getAccessToken().getTokenValue());






        return principalDetails;

    }
}




------
package com.example.demo.config.auth;

import com.example.demo.domain.dto.UserDto;
import com.example.demo.domain.entity.User;
import com.example.demo.domain.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Service;
import lombok.extern.slf4j.Slf4j;

import java.util.Optional;

@Service
@Slf4j
public class PrincipalDetailsService implements UserDetailsService{

	@Autowired
	private UserRepository userRepository;
	
	@Override
	public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
		
		System.out.println("loadUserByUsername .. " + username);
		Optional<User> userOption  = userRepository.findById(username);
		if(userOption.isEmpty())
			throw new UsernameNotFoundException(username + " 존재하지 않는 계정입니다.");

		//entity-> dto
		UserDto userDto = UserDto.toDto( userOption.get()    );
		return new PrincipalDetails(userDto);
	}

}






-------
12SPRING_SEUCURITY/02_OAUTH2/src/main/java/com/example/demo/config/DataSourceConfig.java

package com.example.demo.config;


import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import com.zaxxer.hikari.HikariDataSource;

@Configuration
public class DataSourceConfig {

//	HikariCP DataSource
	@Bean
	public HikariDataSource dataSource()
	{
		HikariDataSource dataSource = new HikariDataSource();
		dataSource.setDriverClassName("com.mysql.cj.jdbc.Driver");
		dataSource.setJdbcUrl("jdbc:mysql://localhost:3306/testdb");
		dataSource.setUsername("root");
		dataSource.setPassword("1234");	
		 
		return dataSource;
	}
	
	
}



-----
12SPRING_SEUCURITY/02_OAUTH2/src/main/java/com/example/demo/config/JpaConfig.java

package com.example.demo.config;



import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.domain.EntityScan;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.io.ClassPathResource;
import org.springframework.core.io.Resource;
import org.springframework.data.jpa.repository.config.EnableJpaRepositories;
import org.springframework.jdbc.datasource.init.DataSourceInitializer;
import org.springframework.jdbc.datasource.init.DatabasePopulator;
import org.springframework.jdbc.datasource.init.ResourceDatabasePopulator;
import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;
import org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter;

import javax.sql.DataSource;
import java.util.HashMap;
import java.util.Map;
import java.util.Properties;

@Configuration
@EntityScan(basePackages = {"com.example.demo.domain.entity"})
@EnableJpaRepositories
(
                basePackages ="com.example.demo.domain.repository",
                transactionManagerRef = "jpaTransactionManager"
)
public class JpaConfig {
    @Autowired
    private DataSource dataSource;

    @Bean
    LocalContainerEntityManagerFactoryBean entityManagerFactory() {
        LocalContainerEntityManagerFactoryBean entityManagerFactoryBean = new LocalContainerEntityManagerFactoryBean();
        entityManagerFactoryBean.setDataSource(dataSource);
        entityManagerFactoryBean.setJpaVendorAdapter(new HibernateJpaVendorAdapter());
        entityManagerFactoryBean.setPackagesToScan("com.example.demo.domain.entity");

        Properties jpaProperties = new Properties();


        Map<String, Object> properties = new HashMap<>();
        properties.put("hibernate.hbm2ddl.auto", "update");                         // 필요에 따라 'create', 'validate' 등으로 변경
        properties.put("hibernate.dialect", "org.hibernate.dialect.MySQLDialect"); // 사용 중인 DB에 맞게 변경
        properties.put("hibernate.show_sql", true);
        properties.put("hibernate.format_sql", true);

        properties.put("hibernate.hibernate.jdbc.batch_size", 1000);
        properties.put("hibernate.hibernate.order_inserts", true);
        properties.put("hibernate.order_updates", true);
        properties.put("hibernate.jdbc.batch_versioned_data", true);
        entityManagerFactoryBean.setJpaPropertyMap(properties);

        return entityManagerFactoryBean;
    }


    //애플리케이션 시작 시 데이터베이스 초기화
//    @Bean
//    public DataSourceInitializer dataSourceInitializer() {
//        DataSourceInitializer initializer = new DataSourceInitializer();
//        initializer.setDataSource(dataSource);
//        initializer.setDatabasePopulator(databasePopulator());
//        return initializer;
//    }

    //schema.sql과 data.sql 스크립트를 실행
//    private DatabasePopulator databasePopulator() {
//        //Spring Framework에서 제공하는 클래스로, 외부 리소스에 정의된 SQL 스크립트를 사용하여 데이터베이스를 초기화하거나 정리하는 데 사용
//        ResourceDatabasePopulator populator = new ResourceDatabasePopulator();
//        //src/main/resources 디렉토리에 위치한 SQL 스크립트를 로드
//        Resource schemaScript = new ClassPathResource("schema.sql");
//        Resource dataScript = new ClassPathResource("data.sql");
//        populator.addScript(schemaScript);
//        populator.addScript(dataScript);
//        return populator;
//    }

}





-----
12SPRING_SEUCURITY/02_OAUTH2/src/main/java/com/example/demo/config/SecurityConfig.java


package com.example.demo.config;


import com.example.demo.config.auth.exceptionHandler.CustomAccessDeniedHandler;
import com.example.demo.config.auth.exceptionHandler.CustomAuthenticationEntryPoint;
import com.example.demo.config.auth.loginHandler.CustomLoginFailureHandler;
import com.example.demo.config.auth.loginHandler.CustomLoginSuccessHandler;
import com.example.demo.config.auth.logoutHandler.CustomLogoutHandler;
import com.example.demo.config.auth.logoutHandler.CustomLogoutSuccessHandler;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;

@Configuration
@EnableWebSecurity
public class SecurityConfig {

	@Autowired
	private CustomLoginSuccessHandler customLoginSuccessHandler;
	@Autowired
	private CustomLogoutHandler customLogoutHandler;
	@Autowired
	private CustomLogoutSuccessHandler customLogoutSuccessHandler;


	@Bean
	protected SecurityFilterChain configure(HttpSecurity http) throws Exception {
		//CSRF비활성화
		http.csrf((config)->{config.disable();});
		//CSRF토큰 쿠키형태로 전달
//		http.csrf().csrfTokenRepository(CookieCsrfTokenRepository.withHttpOnlyFalse());
		//권한체크
		http.authorizeHttpRequests((auth)->{
			auth.requestMatchers("/","/join","/login").permitAll();
			auth.requestMatchers("/user").hasRole("USER");
			auth.requestMatchers("/manager").hasRole("MANAGER");
			auth.requestMatchers("/admin").hasRole("ADMIN");
			auth.anyRequest().authenticated();
		});

		//로그인
		http.formLogin((login)->{
			login.permitAll();
			login.loginPage("/login");
			login.successHandler(customLoginSuccessHandler);
			login.failureHandler(new CustomLoginFailureHandler());
		});
		//로그아웃
		http.logout((logout)->{
			logout.permitAll();
			logout.addLogoutHandler(customLogoutHandler);
			logout.logoutSuccessHandler(customLogoutSuccessHandler);
		});
		//예외처리

		http.exceptionHandling((ex)->{
			ex.authenticationEntryPoint(new CustomAuthenticationEntryPoint());
			ex.accessDeniedHandler(new CustomAccessDeniedHandler());
		});

		//OAUTH2-CLIENT
		http.oauth2Login((oauth2)->{
			oauth2.loginPage("/login");
		});

		return http.build();
		
	}

	@Bean
	public PasswordEncoder passwordEncoder() {
		return new BCryptPasswordEncoder();
	}

}





-----

12SPRING_SEUCURITY/02_OAUTH2/src/main/java/com/example/demo/config/TxConfig.java


package com.example.demo.config;

import jakarta.persistence.EntityManagerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.jdbc.datasource.DataSourceTransactionManager;
import org.springframework.orm.jpa.JpaTransactionManager;
import org.springframework.transaction.annotation.EnableTransactionManagement;

import javax.sql.DataSource;

@Configuration
@EnableTransactionManagement
public class TxConfig {
    @Autowired
    private DataSource dataSource;

//    // 기본 TransactionManager
//    @Bean(name = "dataSourceTransactionManager")
//    public DataSourceTransactionManager transactionManager2() {
//        //System.out.println("TX dataSrouce2 : " + dataSource2.toString());
//        return new DataSourceTransactionManager(dataSource);
//    }


    //    JPA TransactionManager Settings
    @Bean(name="jpaTransactionManager")
    public JpaTransactionManager jpaTransactionManager(EntityManagerFactory entityManagerFactory) {
        JpaTransactionManager transactionManager = new JpaTransactionManager();
        transactionManager.setEntityManagerFactory(entityManagerFactory);
        transactionManager.setDataSource(dataSource);

        return transactionManager;
    }

}



--------
12SPRING_SEUCURITY/02_OAUTH2/src/main/java/com/example/demo/controller/HomeController.java


package com.example.demo.controller;

import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;

@Controller
@Slf4j
public class HomeController {

    @GetMapping("/")
    public String home(){
        log.info("GET /...");
        return "home";
    }
}



----------
12SPRING_SEUCURITY/02_OAUTH2/src/main/java/com/example/demo/controller/UserController.java

package com.example.demo.controller;

import java.beans.PropertyEditorSupport;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;

import com.example.demo.domain.dto.UserDto;
import com.example.demo.domain.entity.User;
import com.example.demo.domain.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;


import lombok.extern.slf4j.Slf4j;

@Controller
@Slf4j
public class UserController {

	@Autowired
	private UserRepository userRepository;

	@Autowired
	private PasswordEncoder passwordEncoder;

	@GetMapping("/login")
	public void login() {
		log.info("GET /login...");
	}
	
//	@GetMapping("/user")
//	public void user(Authentication authentication) {
//		log.info("GET /user..." + authentication);
//		log.info("name..." + authentication.getName());
//		log.info("principal..." + authentication.getPrincipal());
//		log.info("authorities..." + authentication.getAuthorities());
//		log.info("details..." + authentication.getDetails());
//		log.info("credential..." + authentication.getCredentials());
//	}
	
//	@GetMapping("/user")
//	public void user(@AuthenticationPrincipal Principal principal) {
//		log.info("GET /user..." + principal);
//	}
	
	@GetMapping("/user")
	public void user(Model model) {
		log.info("GET /user...");
		Authentication authenticaton = 
		SecurityContextHolder.getContext().getAuthentication();
		log.info("authentication : " + authenticaton);
		
		model.addAttribute("auth",authenticaton);
		
	}
	
	@GetMapping("/manager")
	public void manager() {
		log.info("GET /manager...");	
	}
	@GetMapping("/admin")
	public void admin() {
		log.info("GET /admin...");	
	}
	
	
	
	@GetMapping("/join")
	public void join() {
		log.info("GET /join..");
	}

	@PostMapping("/join")
	public String join_post(UserDto dto, RedirectAttributes redirectAttributes ) {
		log.info("POST /join.." + dto);

		//DTO->ENTITY(DB저장) , ENTITY->DTO(뷰로전달)
		dto.setPassword(  passwordEncoder.encode( dto.getPassword() ) );
		userRepository.save(dto.toEntity());

		boolean isJoin  = true;
		if(isJoin) {
			redirectAttributes.addFlashAttribute("message","회원가입 완료!");
			return "redirect:/login";
		}
		else
			return "join";
	}

}





-------

12SPRING_SEUCURITY/02_OAUTH2/src/main/java/com/example/demo/domain/dto/UserDto.java

package com.example.demo.domain.dto;

import java.time.LocalDate;

import com.example.demo.domain.entity.User;
import org.springframework.format.annotation.DateTimeFormat;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class UserDto {
	private String username;
	private String password;
	private String role;
	//DTO->ENTITY
	public User toEntity(){
		return User.builder()
				.username(this.username)
				.password(this.password)
				.role("ROLE_USER")
				.build();
	}
	//ENTITY->DTO
	public static UserDto toDto(User user){
		return UserDto.builder()
					.username(user.getUsername())
					.password(user.getPassword())
					.role(user.getRole())
					.build();
	}
}




------
12SPRING_SEUCURITY/02_OAUTH2/src/main/java/com/example/demo/domain/entity/User.java

package com.example.demo.domain.entity;

import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder
@Entity
public class User {
	@Id
	private String username;
	private String password;
	private String role;
}



-----
12SPRING_SEUCURITY/02_OAUTH2/src/main/java/com/example/demo/domain/repository/UserRepository.java

package com.example.demo.domain.repository;

import com.example.demo.domain.entity.User;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface UserRepository extends JpaRepository<User,String> {
}



----

12SPRING_SEUCURITY/02_OAUTH2/src/main/resources/templates/admin.html

<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>
	<h1>ADMIN</h1>
	
	<a href="/logout">로그아웃</a>
</body>
</html>


----
12SPRING_SEUCURITY/02_OAUTH2/src/main/resources/templates/home.html

<html>
<head>
	<title>Home</title>
</head>
<body>
<h1>HOME</h1>

</body>
</html>



-----
12SPRING_SEUCURITY/02_OAUTH2/src/main/resources/templates/join.html


<!DOCTYPE html>
<html xmlns:th="http://www.w3.org/1999/xhtml">
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>

	<form action="/join" method="post">
		<div>
			<h1>회원가입</h1>
		</div>
		<div>
			<label>username : </label><span style="color:red;font-size:.7rem;" th:text="${username}"></span><br>
			<input name="username" />
		</div>
		<div>
			<label>password : </label><span style="color:red;font-size:.7rem;" th:text="${password}"></span><br>
			<input name="password" />
		</div>
		<div>
			<input type="submit" value="회원가입" />
		</div>

	
	</form>
</body>
</html>



-----
12SPRING_SEUCURITY/02_OAUTH2/src/main/resources/templates/login.html

<!DOCTYPE html>
<html xmlns:th="http://www.w3.org/1999/xhtml">
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>
	<h1>LOGIN</h1>
	<form action="/login" method="post">
		<div>
			<label>USERNAME : </label>
			<input name="username" />
		</div>
		<div>
			<label>PASSWORD :</label>
			<input name="password" type="password"/>
		</div>
		<button>로그인</button>
<!--		 <input type="hidden" name="_csrf" value="${_csrf.token}" /> -->
	</form>
	<span th:text="${message}"></span>
	<span th:text="${param.error}"></span>
	<hr/>
	<a href="/oauth2/authorization/kakao">카카오 로그인</a><br>
	<a href="/oauth2/authorization/naver">네이버 로그인</a><br>
	<a href="/oauth2/authorization/google">구글 로그인</a><br>
	
</body>
</html>






------
12SPRING_SEUCURITY/02_OAUTH2/src/main/resources/templates/manager.html

<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>
	<h1>MANAGER</h1>
	
	<a href="/logout">로그아웃</a>
</body>
</html>







-------
12SPRING_SEUCURITY/02_OAUTH2/src/main/resources/templates/user.html

<!DOCTYPE html>
<html xmlns:th="http://www.w3.org/1999/xhtml">
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>
	<h1>USER</h1>
	
	
	<div>
		auth :  <span th:text="${auth}"></span>
	</div>
	<!--
		카카오 로그아웃인지?
		-->
	<a href="/logout">로그아웃</a>
	<!--
		네이버/구글
		1) 팝업창띄우고(숨겨놓는상태) 로그아웃처리
		2) iframe 만들고 로그아웃처리
		-->
</body>
</html>







